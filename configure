#!/usr/bin/env bash

set -e

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BUILD=`pwd`

if [[ "$ROOT" == "$BUILD" ]]; then
  BUILD=$ROOT/_build
fi

configuration=${GALA_CONFIG_CONFIGURATION:-debug}
linkage=${GALA_CONFIG_LINKAGE:-static}
platform=${GALA_CONFIG_PLATFORM:-`$ROOT/build/platform.sh`}
architecture=${GALA_CONFIG_ARCHITECTURE:-`$ROOT/build/architecture.sh`}
foundation=${GALA_CONFIG_FOUNDATION}

function usage {
  echo "Usage: configure [OPTIONS]"
  echo "Generates a Makefile for a configuration."
  echo ""
  echo "  --configuration [configuration]   Specify a configuration to use: debug,"
  echo "  --configuration=[configuration]   development, and release."
  echo ""
  echo "  --linkage [linkage]               Specify linkage: dynamic, static. "
  echo "  --linkage=[linkage]"
  echo ""
  echo "  --platform [platform]             Specify a platform to target: windows,"
  echo "  --platform=[platform]             macosx, linux, bsd, etc."
  echo ""
  echo "  --architecture [architecture]     Specify an architecture to target: x86,"
  echo "  --architecture=[architecture]     x86-64, arm, etc."
  echo ""
  echo "  --foundation [foundation]         Specify copy of foundation."
  echo "  --foundation=[foundation]         "
  echo ""
  echo "  --help, --usage                   Displays this."
  echo ""
  echo "Report bugs on our issue tracker at github.com/origamicomet/gala/issues."
  exit 1
}

while [[ $# > 0 ]]; do
  case "$1" in
    --help)
      usage
      ;;
    --usage)
      usage
      ;;
    --configuration)
      shift;
      configuration=$1
      ;;
    --configuration=*)
      configuration=`echo "$1" | sed 's/^--configuration=//'`
      ;;
    --linkage)
      shift;
      linkage=$1
      ;;
    --linkage=*)
      linkage=`echo "$1" | sed 's/^--linkage=//'`
      ;;
    --platform)
      shift;
      platform=$1
      ;;
    --platform=*)
      platform=`echo "$1" | sed 's/^--platform=//'`
      ;;
    --architecture)
      shift;
      architecture=$1
      ;;
    --architecture=*)
      architecture=`echo "$1" | sed 's/^--architecture=//'`
      ;;
    --foundation)
      shift;
      foundation=$1
      ;;
    --foundation=*)
      foundation=`echo "$1" | sed 's/^--foundation=//'`
      ;;
    *)
      usage
      ;;
  esac
  shift
done

case "$configuration" in
  debug)
    ;;
  development)
    ;;
  release)
    ;;
  *)
    echo "Unknown configuration '$configuration'!"
    echo ""
    usage
    ;;
esac

case "$linkage" in
  static)
    ;;
  dynamic)
    ;;
  *)
    echo "Unknown linkage '$linkage'!"
    echo ""
    usage
    ;;
esac

case "$platform" in
  mingw)
    ;;
  cygwin)
    echo "Cygwin is not supported!"
    echo ""
    exit 1
    ;;
  macosx)
    ;;
  linux)
    ;;
  bsd)
    ;;
  *)
    echo "Unknown or unsupported platform '$platform'!"
    echo ""
    echo "If you're trying to target closed platforms, like consoles, please do contact"
    echo "us at <licensing@origamicomet.com> as we may support it, but for obvious reasons"
    echo "cannot open-source the relevant code."
    echo ""
    usage
    ;;
esac

case "$architecture" in
  x86)
    ;;
  x86-64)
    ;;
  *)
    echo "Unknown or unsupported architecture '$architecture'!"
    echo ""
    echo "If you're trying to target closed architectures, like larrabee, please do"
    echo "contact us at <licensing@origamicomet.com> as we may support it, but for obvious"
    echo "reasons cannot open-source the relevant code."
    echo ""
    usage
    ;;
esac

if [ -z "$foundation" ]; then
  echo "You must specify a copy of origamicomet/foundation!"
  echo ""
  usage
fi

cat >Makefile <<EOF
# Do not modify this file; it was auto-generated by ${ROOT}/configure!

export ROOT := ${ROOT}
export BUILD := ${BUILD}

export CONFIGURATION := ${configuration}
export LINKAGE := ${linkage}
export PLATFORM := ${platform}
export ARCHITECTURE := ${architecture}

export FOUNDATION := `grep -e '^export\ ROOT\ \:\=\ ' ${foundation}/Makefile | sed s/^.*\:\=\ // | cat`
export FOUNDATION_BUILD := `grep -e '^export\ BUILD\ \:\=\ ' ${foundation}/Makefile | sed s/^.*\:\=\ // | cat`
export FOUNDATION_CONFIGURATION := `grep -e '^export\ CONFIGURATION\ \:\=\ ' ${foundation}/Makefile | sed s/^.*\:\=\ // | cat`
export FOUNDATION_LINKAGE := `grep -e '^export\ LINKAGE\ \:\=\ ' ${foundation}/Makefile | sed s/^.*\:\=\ // | cat`
export FOUNDATION_PLATFORM := `grep -e '^export\ PLATFORM\ \:\=\ ' ${foundation}/Makefile | sed s/^.*\:\=\ // | cat`
export FOUNDATION_ARCHITECTURE := `grep -e '^export\ ARCHITECTURE\ \:\=\ ' ${foundation}/Makefile | sed s/^.*\:\=\ // | cat`

include ${ROOT}/Makefile.any
EOF

echo "Configured successfully!"
exit 0
